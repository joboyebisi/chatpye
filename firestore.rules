rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isValidData() {
      return request.resource.data.keys().hasAll(['text', 'timestamp', 'videoId']) &&
             request.resource.data.text is string &&
             request.resource.data.timestamp is string &&
             request.resource.data.videoId is string;
    }

    function isValidAnalysisData() {
      return request.resource.data.keys().hasAll(['analysis', 'timestamp', 'videoId', 'prompt']) &&
             request.resource.data.analysis is string &&
             request.resource.data.timestamp is timestamp &&
             request.resource.data.videoId is string &&
             request.resource.data.prompt is string;
    }

    // Default deny
    match /{document=**} {
      allow read, write: if false;
    }

    // Video analysis cache collection
    match /video_analysis/{document} {
      allow read: if true;  // Public read access for cached analyses
      allow write: if isAuthenticated() && isValidAnalysisData();
    }

    // YouTube videos collection
    match /youtube_videos/{document} {
      allow read: if true;
      allow write: if isAuthenticated() && isValidData();
    }

    // Users collection
    match /users/{userId} {
      allow read: if true;
      allow write: if isAuthenticated() && request.auth.uid == userId;
    }

    // Chat messages collection
    match /chat_messages/{messageId} {
      allow read: if true;
      allow write: if isAuthenticated() && request.auth.uid == request.resource.data.userId;
    }
  }
} 
} 